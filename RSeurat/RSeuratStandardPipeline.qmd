---
title: "R-Seurat Standard Pipeline"
format: 
  html: 
    code-fold: true
    embed-resources: true
    toc: true
    output-file: SeuratStandardPipeline
editor: visual
---

# Generate a Seurat object

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(Seurat)
library(patchwork)

# Load the PBMC dataset
pbmc.data <-
  Read10X(data.dir = "data/filtered_gene_bc_matrices/hg19/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <-
  CreateSeuratObject(
    counts = pbmc.data,
    project = "pbmc3k",
    min.cells = 3,
    min.features = 200
  )

pbmc
```

**What does data in a count matrix look like?**

```{r}
# Lets examine a few genes in the first thirty cells
pbmc.data[c("CD3D", "TCL1A", "MS4A1"), 1:30]
```

The `.` values in the matrix represent 0s (no molecules detected). Since most values in an scRNA-seq matrix are 0, Seurat uses a sparse-matrix representation whenever possible. This results in significant memory and speed savings for Drop-seq/inDrop/10x data.

# QC and selecting cells for further analysis

Seurat allows you to easily explore QC metrics and filter cells based on any user-defined criteria. A few QC metrics [commonly used](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4758103/) by the community include

-   The number of unique genes detected in each cell.

    -   Low-quality cells or empty droplets will often have very few genes

    -   Cell doublets or multiplets may exhibit an aberrantly high gene count

-   Similarly, the total number of molecules detected within a cell (correlates strongly with unique genes)

-   The percentage of reads that map to the mitochondrial genome

    -   Low-quality / dying cells often exhibit extensive mitochondrial contamination

    -   We calculate mitochondrial QC metrics with the [`PercentageFeatureSet()`](https://satijalab.org/seurat/reference/percentagefeatureset) function, which calculates the percentage of counts originating from a set of features

    -   We use the set of all genes starting with `MT-` as a set of mitochondrial genes

```{r}
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
```

**Where are QC metrics stored in Seurat?**

```{r}
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)

```

In the example below, we visualize QC metrics, and use these to filter cells.

-   We filter cells that have unique feature counts over 2,500 or less than 200

-   We filter cells that have \>5% mitochondrial counts

```{r}
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
```

```{r}
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
```

```{r}
pbmc <-
  subset(pbmc, subset = nFeature_RNA > 200 &
           nFeature_RNA < 2500 & percent.mt < 5)
```

# Normalization

After removing unwanted cells from the dataset, the next step is to normalize the data. By default, we employ a global-scaling normalization method "LogNormalize" that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. In Seurat v5, Normalized values are stored in `pbmc[["RNA"]]$data`.

```{r}
pbmc <- NormalizeData(pbmc)
```

**What does the normalized data look like?**

```{r}
pbmc[["RNA"]]$data[c("CD3D", "TCL1A", "MS4A1"), 1:10]
```

# Feature engineering

```{r}
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
```

# Scaling

Next, we apply a linear transformation ('scaling') that is a standard pre-processing step prior to dimensional reduction techniques like PCA. The [`ScaleData()`](https://satijalab.org/seurat/reference/scaledata) function:

-   Shifts the expression of each gene, so that the mean expression across cells is 0

-   Scales the expression of each gene, so that the variance across cells is 1

    -   This step gives equal weight in downstream analyses, so that highly-expressed genes do not dominate

-   The results of this are stored in `pbmc[["RNA"]]$scale.data`

-   By default, only variable features are scaled.

-   You can specify the `features` argument to scale additional features

```{r}
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
```

**What does the scaled data look like?**

```{r}
pbmc[["RNA"]]$scale.data[c("CD3D", "TCL1A", "MS4A1"), 1:10]
```

# Perform linear dimensional reduction

Next we perform PCA on the scaled data. By default, only the previously determined variable features are used as input, but can be defined using `features` argument if you wish to choose a different subset (if you do want to use a custom subset of features, make sure you pass these to `ScaleData` first).

For the first principal components, Seurat outputs a list of genes with the most positive and negative loadings, representing modules of genes that exhibit either correlation (or anti-correlation) across single-cells in the dataset.

```{r}
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
```

Seurat provides several useful ways of visualizing both cells and features that define the PCA, including `VizDimReduction()`, [`DimPlot()`](https://satijalab.org/seurat/reference/dimplot), and [`DimHeatmap()`](https://satijalab.org/seurat/reference/dimheatmap)

```{r}
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
```

```{r}
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
```

```{r}
DimPlot(pbmc, reduction = "pca") + NoLegend()
```

In particular [`DimHeatmap()`](https://satijalab.org/seurat/reference/dimheatmap) allows for easy exploration of the primary sources of heterogeneity in a dataset, and can be useful when trying to decide which PCs to include for further downstream analyses. Both cells and features are ordered according to their PCA scores. Setting `cells` to a number plots the 'extreme' cells on both ends of the spectrum, which dramatically speeds plotting for large datasets. Though clearly a supervised analysis, we find this to be a valuable tool for exploring correlated feature sets.

```{r}
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
```

```{r}
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
```

# Determine the 'dimensionality' of the dataset

To overcome the extensive technical noise in any single feature for scRNA-seq data, Seurat clusters cells based on their PCA scores, with each PC essentially representing a 'metafeature' that combines information across a correlated feature set. The top principal components therefore represent a robust compression of the dataset. However, how many components should we choose to include? 10? 20? 100?

In [Macosko *et al*](http://www.cell.com/abstract/S0092-8674(15)00549-8), we implemented a resampling test inspired by the JackStraw procedure. While still available in Seurat [(see previous vignette)](https://satijalab.org/seurat/articles/pbmc3k_tutorial), this is a slow and computationally expensive procedure, and we is no longer routinely used in single cell analysis.

An alternative heuristic method generates an 'Elbow plot': a ranking of principle components based on the percentage of variance explained by each one ([`ElbowPlot()`](https://satijalab.org/seurat/reference/elbowplot) function). In this example, we can observe an 'elbow' around PC9-10, suggesting that the majority of true signal is captured in the first 10 PCs.

```{r}
ElbowPlot(pbmc)
```

Identifying the true dimensionality of a dataset -- can be challenging/uncertain for the user. We therefore suggest these multiple approaches for users. The first is more supervised, exploring PCs to determine relevant sources of heterogeneity, and could be used in conjunction with GSEA for example. The second (`ElbowPlot`) The third is a heuristic that is commonly used, and can be calculated instantly. In this example, we might have been justified in choosing anything between PC 7-12 as a cutoff.

We chose 10 here, but encourage users to consider the following:

-   Dendritic cell and NK aficionados may recognize that genes strongly associated with PCs 12 and 13 define rare immune subsets (i.e. MZB1 is a marker for plasmacytoid DCs). However, these groups are so rare, they are difficult to distinguish from background noise for a dataset of this size without prior knowledge.

-   We encourage users to repeat downstream analyses with a different number of PCs (10, 15, or even 50!). As you will observe, the results often do not differ dramatically.

-   We advise users to err on the higher side when choosing this parameter. For example, performing downstream analyses with only 5 PCs does significantly and adversely affect results.

# Cluster the cells

```{r}
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
```

```{r}
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
```

# Run non-linear dimensional reduction (UMAP/tSNE)

```{r}
pbmc <- RunUMAP(pbmc, dims = 1:10)
```

```{r}
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
```

```{r}
saveRDS(pbmc, file = "output/pbmc_tutorial.rds")
```

# Finding differentially expressed features (cluster biomarkers)

```{r}
# find all markers of cluster 2
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2)
head(cluster2.markers, n = 5)
```

```{r}
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <-
  FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)
```

```{r}
# find markers for every cluster compared to all remaining cells, report only the positive
# ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)
pbmc.markers |> 
  group_by(cluster) |>
  dplyr::filter(avg_log2FC > 1)
```

```{r}
cluster0.markers <-
  FindMarkers(
    pbmc,
    ident.1 = 0,
    logfc.threshold = 0.25,
    test.use = "roc",
    only.pos = TRUE
  )
```

## Visualization

```{r}
VlnPlot(pbmc, features = c("MS4A1", "CD79A"))
```

```{r}
# you can plot raw counts as well
VlnPlot(pbmc, features = c("NKG7", "PF4"), slot = "counts", log = TRUE)
```

```{r}
FeaturePlot(
  pbmc,
  features = c(
    "MS4A1",
    "GNLY",
    "CD3E",
    "CD14",
    "FCER1A",
    "FCGR3A",
    "LYZ",
    "PPBP",
    "CD8A"
  )
)
```

```{r}
pbmc.markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 10) %>%
    ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
```

# Assigning cell type identity to clusters

```{r}
new.cluster.ids <-
  c(
    "Naive CD4 T",
    "CD14+ Mono",
    "Memory CD4 T",
    "B",
    "CD8 T",
    "FCGR3A+ Mono",
    "NK",
    "DC",
    "Platelet"
  )
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc,
        reduction = "umap",
        label = TRUE,
        pt.size = 0.5) + NoLegend()
```

```{r}
library(ggplot2)
plot <-
  DimPlot(pbmc,
          reduction = "umap",
          label = TRUE,
          label.size = 4.5) + xlab("UMAP 1") + ylab("UMAP 2") +
  theme(axis.title = element_text(size = 18),
        legend.text = element_text(size = 18)) + guides(colour = guide_legend(override.aes = list(size = 10)))
ggsave(
  filename = "output/images/pbmc3k_umap.jpg",
  height = 7,
  width = 12,
  plot = plot,
  quality = 50
)
```

```{r}
saveRDS(pbmc, file = "output/pbmc3k_final.rds")
```
